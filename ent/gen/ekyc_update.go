// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gmhafiz/go8/ent/gen/account"
	"github.com/gmhafiz/go8/ent/gen/ekyc"
	"github.com/gmhafiz/go8/ent/gen/predicate"
)

// EkycUpdate is the builder for updating Ekyc entities.
type EkycUpdate struct {
	config
	hooks    []Hook
	mutation *EkycMutation
}

// Where appends a list predicates to the EkycUpdate builder.
func (eu *EkycUpdate) Where(ps ...predicate.Ekyc) *EkycUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEkycName sets the "ekyc_name" field.
func (eu *EkycUpdate) SetEkycName(s string) *EkycUpdate {
	eu.mutation.SetEkycName(s)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EkycUpdate) SetCreatedAt(t time.Time) *EkycUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EkycUpdate) SetNillableCreatedAt(t *time.Time) *EkycUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (eu *EkycUpdate) ClearCreatedAt() *EkycUpdate {
	eu.mutation.ClearCreatedAt()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EkycUpdate) SetUpdatedAt(t time.Time) *EkycUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EkycUpdate) SetNillableUpdatedAt(t *time.Time) *EkycUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EkycUpdate) ClearUpdatedAt() *EkycUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EkycUpdate) SetDeletedAt(t time.Time) *EkycUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EkycUpdate) SetNillableDeletedAt(t *time.Time) *EkycUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EkycUpdate) ClearDeletedAt() *EkycUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (eu *EkycUpdate) AddAccountIDs(ids ...uint) *EkycUpdate {
	eu.mutation.AddAccountIDs(ids...)
	return eu
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (eu *EkycUpdate) AddAccounts(a ...*Account) *EkycUpdate {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddAccountIDs(ids...)
}

// Mutation returns the EkycMutation object of the builder.
func (eu *EkycUpdate) Mutation() *EkycMutation {
	return eu.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (eu *EkycUpdate) ClearAccounts() *EkycUpdate {
	eu.mutation.ClearAccounts()
	return eu
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (eu *EkycUpdate) RemoveAccountIDs(ids ...uint) *EkycUpdate {
	eu.mutation.RemoveAccountIDs(ids...)
	return eu
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (eu *EkycUpdate) RemoveAccounts(a ...*Account) *EkycUpdate {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EkycUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EkycMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EkycUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EkycUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EkycUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EkycUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ekyc.Table,
			Columns: ekyc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: ekyc.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EkycName(); ok {
		_spec.SetField(ekyc.FieldEkycName, field.TypeString, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(ekyc.FieldCreatedAt, field.TypeTime, value)
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(ekyc.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(ekyc.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(ekyc.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(ekyc.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(ekyc.FieldDeletedAt, field.TypeTime)
	}
	if eu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ekyc.AccountsTable,
			Columns: ekyc.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !eu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ekyc.AccountsTable,
			Columns: ekyc.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ekyc.AccountsTable,
			Columns: ekyc.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ekyc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EkycUpdateOne is the builder for updating a single Ekyc entity.
type EkycUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EkycMutation
}

// SetEkycName sets the "ekyc_name" field.
func (euo *EkycUpdateOne) SetEkycName(s string) *EkycUpdateOne {
	euo.mutation.SetEkycName(s)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EkycUpdateOne) SetCreatedAt(t time.Time) *EkycUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EkycUpdateOne) SetNillableCreatedAt(t *time.Time) *EkycUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (euo *EkycUpdateOne) ClearCreatedAt() *EkycUpdateOne {
	euo.mutation.ClearCreatedAt()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EkycUpdateOne) SetUpdatedAt(t time.Time) *EkycUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EkycUpdateOne) SetNillableUpdatedAt(t *time.Time) *EkycUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EkycUpdateOne) ClearUpdatedAt() *EkycUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EkycUpdateOne) SetDeletedAt(t time.Time) *EkycUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EkycUpdateOne) SetNillableDeletedAt(t *time.Time) *EkycUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EkycUpdateOne) ClearDeletedAt() *EkycUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (euo *EkycUpdateOne) AddAccountIDs(ids ...uint) *EkycUpdateOne {
	euo.mutation.AddAccountIDs(ids...)
	return euo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (euo *EkycUpdateOne) AddAccounts(a ...*Account) *EkycUpdateOne {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddAccountIDs(ids...)
}

// Mutation returns the EkycMutation object of the builder.
func (euo *EkycUpdateOne) Mutation() *EkycMutation {
	return euo.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (euo *EkycUpdateOne) ClearAccounts() *EkycUpdateOne {
	euo.mutation.ClearAccounts()
	return euo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (euo *EkycUpdateOne) RemoveAccountIDs(ids ...uint) *EkycUpdateOne {
	euo.mutation.RemoveAccountIDs(ids...)
	return euo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (euo *EkycUpdateOne) RemoveAccounts(a ...*Account) *EkycUpdateOne {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveAccountIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EkycUpdateOne) Select(field string, fields ...string) *EkycUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Ekyc entity.
func (euo *EkycUpdateOne) Save(ctx context.Context) (*Ekyc, error) {
	var (
		err  error
		node *Ekyc
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EkycMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ekyc)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EkycMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EkycUpdateOne) SaveX(ctx context.Context) *Ekyc {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EkycUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EkycUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EkycUpdateOne) sqlSave(ctx context.Context) (_node *Ekyc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ekyc.Table,
			Columns: ekyc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: ekyc.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Ekyc.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ekyc.FieldID)
		for _, f := range fields {
			if !ekyc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != ekyc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EkycName(); ok {
		_spec.SetField(ekyc.FieldEkycName, field.TypeString, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(ekyc.FieldCreatedAt, field.TypeTime, value)
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(ekyc.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(ekyc.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(ekyc.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(ekyc.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(ekyc.FieldDeletedAt, field.TypeTime)
	}
	if euo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ekyc.AccountsTable,
			Columns: ekyc.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !euo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ekyc.AccountsTable,
			Columns: ekyc.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ekyc.AccountsTable,
			Columns: ekyc.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ekyc{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ekyc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
