// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gmhafiz/go8/ent/gen/ekyc"
)

// Ekyc is the model entity for the Ekyc schema.
type Ekyc struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// EkycName holds the value of the "ekyc_name" field.
	EkycName string `json:"ekyc_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"-"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"-"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EkycQuery when eager-loading is set.
	Edges EkycEdges `json:"edges"`
}

// EkycEdges holds the relations/edges for other nodes in the graph.
type EkycEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*Account `json:"accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e EkycEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ekyc) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ekyc.FieldID:
			values[i] = new(sql.NullInt64)
		case ekyc.FieldEkycName:
			values[i] = new(sql.NullString)
		case ekyc.FieldCreatedAt, ekyc.FieldUpdatedAt, ekyc.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ekyc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ekyc fields.
func (e *Ekyc) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ekyc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint(value.Int64)
		case ekyc.FieldEkycName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ekyc_name", values[i])
			} else if value.Valid {
				e.EkycName = value.String
			}
		case ekyc.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case ekyc.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case ekyc.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = new(time.Time)
				*e.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAccounts queries the "accounts" edge of the Ekyc entity.
func (e *Ekyc) QueryAccounts() *AccountQuery {
	return (&EkycClient{config: e.config}).QueryAccounts(e)
}

// Update returns a builder for updating this Ekyc.
// Note that you need to call Ekyc.Unwrap() before calling this method if this Ekyc
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Ekyc) Update() *EkycUpdateOne {
	return (&EkycClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Ekyc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Ekyc) Unwrap() *Ekyc {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("gen: Ekyc is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Ekyc) String() string {
	var builder strings.Builder
	builder.WriteString("Ekyc(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("ekyc_name=")
	builder.WriteString(e.EkycName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := e.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Ekycs is a parsable slice of Ekyc.
type Ekycs []*Ekyc

func (e Ekycs) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
