// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gmhafiz/go8/ent/gen/account"
	"github.com/gmhafiz/go8/ent/gen/ekyc"
)

// EkycCreate is the builder for creating a Ekyc entity.
type EkycCreate struct {
	config
	mutation *EkycMutation
	hooks    []Hook
}

// SetEkycName sets the "ekyc_name" field.
func (ec *EkycCreate) SetEkycName(s string) *EkycCreate {
	ec.mutation.SetEkycName(s)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EkycCreate) SetCreatedAt(t time.Time) *EkycCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EkycCreate) SetNillableCreatedAt(t *time.Time) *EkycCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EkycCreate) SetUpdatedAt(t time.Time) *EkycCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EkycCreate) SetNillableUpdatedAt(t *time.Time) *EkycCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EkycCreate) SetDeletedAt(t time.Time) *EkycCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EkycCreate) SetNillableDeletedAt(t *time.Time) *EkycCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EkycCreate) SetID(u uint) *EkycCreate {
	ec.mutation.SetID(u)
	return ec
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (ec *EkycCreate) AddAccountIDs(ids ...uint) *EkycCreate {
	ec.mutation.AddAccountIDs(ids...)
	return ec
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (ec *EkycCreate) AddAccounts(a ...*Account) *EkycCreate {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddAccountIDs(ids...)
}

// Mutation returns the EkycMutation object of the builder.
func (ec *EkycCreate) Mutation() *EkycMutation {
	return ec.mutation
}

// Save creates the Ekyc in the database.
func (ec *EkycCreate) Save(ctx context.Context) (*Ekyc, error) {
	var (
		err  error
		node *Ekyc
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EkycMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ekyc)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EkycMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EkycCreate) SaveX(ctx context.Context) *Ekyc {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EkycCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EkycCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EkycCreate) check() error {
	if _, ok := ec.mutation.EkycName(); !ok {
		return &ValidationError{Name: "ekyc_name", err: errors.New(`gen: missing required field "Ekyc.ekyc_name"`)}
	}
	return nil
}

func (ec *EkycCreate) sqlSave(ctx context.Context) (*Ekyc, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (ec *EkycCreate) createSpec() (*Ekyc, *sqlgraph.CreateSpec) {
	var (
		_node = &Ekyc{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ekyc.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: ekyc.FieldID,
			},
		}
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.EkycName(); ok {
		_spec.SetField(ekyc.FieldEkycName, field.TypeString, value)
		_node.EkycName = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(ekyc.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(ekyc.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(ekyc.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := ec.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ekyc.AccountsTable,
			Columns: ekyc.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EkycCreateBulk is the builder for creating many Ekyc entities in bulk.
type EkycCreateBulk struct {
	config
	builders []*EkycCreate
}

// Save creates the Ekyc entities in the database.
func (ecb *EkycCreateBulk) Save(ctx context.Context) ([]*Ekyc, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Ekyc, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EkycMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EkycCreateBulk) SaveX(ctx context.Context) []*Ekyc {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EkycCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EkycCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
