version: '3'

dotenv: ['.env']

tasks:
  default:
    desc: Lists available commands
    cmds:
      - task -l

  list:
    desc: Lists available commands
    cmds:
      - task -l

  migrate:create:
    desc: Creates .sql migration files (Up and Down). Set name by appending with 'NAME=name_of_file'
    cmds:
      - goose -dir database/migrations postgres "user=$DB_USER password=$DB_PASS dbname=$DB_NAME host=$DB_HOST port=$DB_PORT sslmode=$DB_SSLMODE" create "{{.NAME}}" sql

  migrate:
    desc: Migrates UP the database
    cmds:
      - goose -dir database/goose postgres "user=$DB_USER password=$DB_PASS dbname=$DB_NAME host=$DB_HOST port=$DB_PORT sslmode=$DB_SSLMODE" up

  migrate:step:
    desc: Migrates UP bt one step the database
    cmds:
      - goose -dir database/goose $DB_DRIVER "user=$DB_USER password=$DB_PASS dbname=$DB_NAME host=$DB_HOST port=$DB_PORT sslmode=$DB_SSLMODE" up-by-one

  migrate:rollback:
    desc: Rollback the database by one step
    cmds:
      - goose -dir database/goose postgres "user=$DB_USER password=$DB_PASS dbname=$DB_NAME host=$DB_HOST port=$DB_PORT sslmode=$DB_SSLMODE" down

  run:
    desc: Runs the app
    cmds:
      - task: swagger
      - go run cmd/go8/main.go
    silent: true

  dev:
    desc: Hot reload. Watch for file changes and rebuild binary.
    cmds:
      - air
    silent: true

  routes:
    desc: List all registered routes.
    silent: true
    cmds:
      - go run cmd/route/main.go

  build:
    desc: Creates a compiled binary and copy configuration files into ./bin
    vars:
      GIT_TAG:
        sh: git describe --abbrev=0 --tags
      GIT_COMMIT:
        sh: git rev-list -1 HEAD
    cmds:
      - task: check
      - go build -ldflags="-X main.Version={{.GIT_TAG}}-{{.GIT_COMMIT}} -w -s"  -o go8 cmd/go8/main.go
      - mkdir -p bin
      - mv go8 bin/
      - cp .env bin
    silent: false

  check:
    desc: Checks integrity of program
    cmds:
      - task generate
      - task swagger
      - task fmt
      - task vet
      - task golint
      - task security
      - task vuln
      - task test
    silent: true

  clean:
    desc: Clears built files
    cmds:
      - rm -rf ./bin/*
      - rm -rf ./bin/.*

  clean:cache:
    desc: Clear tests cache
    cmds:
      - go clean -testcache

  tidy:
    desc: Downloads dependencies and removes unused ones
    cmds:
      - go mod tidy

  vet:
    desc: Vets code
    cmds:
      - go vet ./...

  golint:
    desc: Uses golangci-lint
    cmds:
      - golangci-lint run

  security:
    desc: Run golang security
    cmds:
      - gosec -quiet ./...

  vuln:
    desc: Run Go Vulnerability Check
    cmds:
      - govulncheck ./...

  fmt:
    desc: Lint code
    cmds:
      - go fmt ./...

  test:
    desc: Test all code
    cmds:
      - go test ./...

  test:verbose:
    desc: Test all code with verbose mode
    cmds:
      - go test -v ./...

  coverage:
    desc: Perform test coverage
    cmds:
      - go test -cover ./...

  generate:
    desc: Runs all //go:generate commands embedded in .go files
    cmds:
      - go generate ./...

  race:
    desc: Check race condition
    cmds:
      - go test -race ./...

  swagger:
    desc: Generates Swagger page for API reference
    cmds:
      - swag init -g cmd/go8/main.go

  docker:build:
    desc: Builds a Docker image a server container
    cmds:
      - cp .env env.prod
      - docker build -t go8/server -f Dockerfile .

  docker:run:
    desc: Runs the app Docker image as a Docker container
    cmds:
      - docker run -p 3080:3080 --rm -it --net=host --name go8_container go8/server

  docker-compose:start:
    desc: Runs server and database using docker-compose
    cmds:
      - docker-compose -f docker-compose.yml up --build --abort-on-container-exit

  docker-compose:stop:
    desc: Stops server and database using docker-compose
    cmds:
      - docker-compose -f docker-compose.yml down --volumes

  dockertest:
    desc: Run e2e test
    dir: docker-test
    cmds:
      - task: dockertest:stop
      - docker-compose build --no-cache
      - docker-compose up -d
      - docker exec -t go8_container_test "/home/appuser/app/e2e"
      - task: dockertest:stop
    silent: true

  dockertest:stop:
    desc: stop docker e2e test
    dir: docker-test
    cmds:
      - docker-compose down -v

  k8s:push:
    desc: build and push
    vars:
      GIT_TAG:
        sh: git describe --abbrev=0 --tags
      GIT_COMMIT:
        sh: git rev-list -1 HEAD
    cmds:
      - docker build . -t gmhafiz/go8:{{.GIT_TAG}}-{{.GIT_COMMIT}}
      - docker push gmhafiz/go8:{{.GIT_TAG}}-{{.GIT_COMMIT}}

  install:tools:
    desc: Install all optional cli tools
    dir: scripts
    cmds:
      - task: install:golangci
      - task: install:swagger
      - task: install:goose
      - task: install:mirip
      - task: install:gosec
      - task: install:air
      - task: install:vuln
    silent: true

  install:golangci:
    desc: Install golangci linter
    cmds:
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin

  install:swagger:
    desc: Install swagger cli
    cmds:
      - go install github.com/swaggo/swag/cmd/swag@latest

  install:mirip:
    desc: Install mock generator
    cmds:
      - go install github.com/gmhafiz/mirip/cmd/mirip@latest

  install:goose:
    desc: Install golang migration tool
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest

  install:gosec:
    desc: Install golang security check. https://github.com/securego/gosec
    cmds:
      - go install github.com/securego/gosec/v2/cmd/gosec@latest

  install:air:
    desc: Install a hot reloader. Watch for file changes and automatically rebuilds binary
    cmds:
      - go install github.com/cosmtrek/air@latest

  install:vuln:
    desc: Install Go Vulnerability Check
    cmds:
      - go install golang.org/x/vuln/cmd/govulncheck@latest
